package com.hics.g500.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESPUESTA".
*/
public class RespuestaDao extends AbstractDao<Respuesta, Long> {

    public static final String TABLENAME = "RESPUESTA";

    /**
     * Properties of entity Respuesta.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Encuesta_id = new Property(1, Long.class, "encuesta_id", false, "ENCUESTA_ID");
        public final static Property Gas_id = new Property(2, Long.class, "gas_id", false, "GAS_ID");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Completada = new Property(4, Boolean.class, "completada", false, "COMPLETADA");
        public final static Property Enviada = new Property(5, Boolean.class, "enviada", false, "ENVIADA");
        public final static Property Ticket = new Property(6, String.class, "ticket", false, "TICKET");
    }


    public RespuestaDao(DaoConfig config) {
        super(config);
    }
    
    public RespuestaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESPUESTA\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ENCUESTA_ID\" INTEGER," + // 1: encuesta_id
                "\"GAS_ID\" INTEGER," + // 2: gas_id
                "\"EMAIL\" TEXT," + // 3: email
                "\"COMPLETADA\" INTEGER," + // 4: completada
                "\"ENVIADA\" INTEGER," + // 5: enviada
                "\"TICKET\" TEXT);"); // 6: ticket
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESPUESTA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Respuesta entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long encuesta_id = entity.getEncuesta_id();
        if (encuesta_id != null) {
            stmt.bindLong(2, encuesta_id);
        }
 
        Long gas_id = entity.getGas_id();
        if (gas_id != null) {
            stmt.bindLong(3, gas_id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        Boolean completada = entity.getCompletada();
        if (completada != null) {
            stmt.bindLong(5, completada ? 1L: 0L);
        }
 
        Boolean enviada = entity.getEnviada();
        if (enviada != null) {
            stmt.bindLong(6, enviada ? 1L: 0L);
        }
 
        String ticket = entity.getTicket();
        if (ticket != null) {
            stmt.bindString(7, ticket);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Respuesta entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long encuesta_id = entity.getEncuesta_id();
        if (encuesta_id != null) {
            stmt.bindLong(2, encuesta_id);
        }
 
        Long gas_id = entity.getGas_id();
        if (gas_id != null) {
            stmt.bindLong(3, gas_id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        Boolean completada = entity.getCompletada();
        if (completada != null) {
            stmt.bindLong(5, completada ? 1L: 0L);
        }
 
        Boolean enviada = entity.getEnviada();
        if (enviada != null) {
            stmt.bindLong(6, enviada ? 1L: 0L);
        }
 
        String ticket = entity.getTicket();
        if (ticket != null) {
            stmt.bindString(7, ticket);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Respuesta readEntity(Cursor cursor, int offset) {
        Respuesta entity = new Respuesta( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // encuesta_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // gas_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // completada
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // enviada
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // ticket
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Respuesta entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEncuesta_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setGas_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompletada(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setEnviada(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setTicket(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Respuesta entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Respuesta entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Respuesta entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
