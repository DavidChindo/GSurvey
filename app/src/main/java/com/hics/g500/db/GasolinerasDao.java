package com.hics.g500.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GASOLINERAS".
*/
public class GasolinerasDao extends AbstractDao<Gasolineras, Long> {

    public static final String TABLENAME = "GASOLINERAS";

    /**
     * Properties of entity Gasolineras.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Gas_id = new Property(0, Long.class, "gas_id", true, "GAS_ID");
        public final static Property Nombre_gas = new Property(1, String.class, "nombre_gas", false, "NOMBRE_GAS");
        public final static Property Coordenadas = new Property(2, String.class, "coordenadas", false, "COORDENADAS");
        public final static Property Direccion = new Property(3, String.class, "direccion", false, "DIRECCION");
        public final static Property Visited = new Property(4, Boolean.class, "visited", false, "VISITED");
        public final static Property Fecha = new Property(5, String.class, "fecha", false, "FECHA");
    }


    public GasolinerasDao(DaoConfig config) {
        super(config);
    }
    
    public GasolinerasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GASOLINERAS\" (" + //
                "\"GAS_ID\" INTEGER PRIMARY KEY ," + // 0: gas_id
                "\"NOMBRE_GAS\" TEXT," + // 1: nombre_gas
                "\"COORDENADAS\" TEXT," + // 2: coordenadas
                "\"DIRECCION\" TEXT," + // 3: direccion
                "\"VISITED\" INTEGER," + // 4: visited
                "\"FECHA\" TEXT);"); // 5: fecha
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GASOLINERAS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Gasolineras entity) {
        stmt.clearBindings();
 
        Long gas_id = entity.getGas_id();
        if (gas_id != null) {
            stmt.bindLong(1, gas_id);
        }
 
        String nombre_gas = entity.getNombre_gas();
        if (nombre_gas != null) {
            stmt.bindString(2, nombre_gas);
        }
 
        String coordenadas = entity.getCoordenadas();
        if (coordenadas != null) {
            stmt.bindString(3, coordenadas);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(4, direccion);
        }
 
        Boolean visited = entity.getVisited();
        if (visited != null) {
            stmt.bindLong(5, visited ? 1L: 0L);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(6, fecha);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Gasolineras entity) {
        stmt.clearBindings();
 
        Long gas_id = entity.getGas_id();
        if (gas_id != null) {
            stmt.bindLong(1, gas_id);
        }
 
        String nombre_gas = entity.getNombre_gas();
        if (nombre_gas != null) {
            stmt.bindString(2, nombre_gas);
        }
 
        String coordenadas = entity.getCoordenadas();
        if (coordenadas != null) {
            stmt.bindString(3, coordenadas);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(4, direccion);
        }
 
        Boolean visited = entity.getVisited();
        if (visited != null) {
            stmt.bindLong(5, visited ? 1L: 0L);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(6, fecha);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Gasolineras readEntity(Cursor cursor, int offset) {
        Gasolineras entity = new Gasolineras( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // gas_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombre_gas
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // coordenadas
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // direccion
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // visited
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // fecha
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Gasolineras entity, int offset) {
        entity.setGas_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre_gas(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCoordenadas(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDireccion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVisited(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setFecha(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Gasolineras entity, long rowId) {
        entity.setGas_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Gasolineras entity) {
        if(entity != null) {
            return entity.getGas_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Gasolineras entity) {
        return entity.getGas_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
