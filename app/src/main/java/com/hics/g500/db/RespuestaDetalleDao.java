package com.hics.g500.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESPUESTA_DETALLE".
*/
public class RespuestaDetalleDao extends AbstractDao<RespuestaDetalle, Long> {

    public static final String TABLENAME = "RESPUESTA_DETALLE";

    /**
     * Properties of entity RespuestaDetalle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Pregunta_id = new Property(1, Long.class, "pregunta_id", false, "PREGUNTA_ID");
        public final static Property Tipo_id = new Property(2, Integer.class, "tipo_id", false, "TIPO_ID");
        public final static Property Respuestacodigo = new Property(3, Integer.class, "respuestacodigo", false, "RESPUESTACODIGO");
        public final static Property Respuestatexto = new Property(4, String.class, "respuestatexto", false, "RESPUESTATEXTO");
        public final static Property Id_parent = new Property(5, Long.class, "id_parent", false, "ID_PARENT");
    }


    public RespuestaDetalleDao(DaoConfig config) {
        super(config);
    }
    
    public RespuestaDetalleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESPUESTA_DETALLE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PREGUNTA_ID\" INTEGER," + // 1: pregunta_id
                "\"TIPO_ID\" INTEGER," + // 2: tipo_id
                "\"RESPUESTACODIGO\" INTEGER," + // 3: respuestacodigo
                "\"RESPUESTATEXTO\" TEXT," + // 4: respuestatexto
                "\"ID_PARENT\" INTEGER);"); // 5: id_parent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESPUESTA_DETALLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RespuestaDetalle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long pregunta_id = entity.getPregunta_id();
        if (pregunta_id != null) {
            stmt.bindLong(2, pregunta_id);
        }
 
        Integer tipo_id = entity.getTipo_id();
        if (tipo_id != null) {
            stmt.bindLong(3, tipo_id);
        }
 
        Integer respuestacodigo = entity.getRespuestacodigo();
        if (respuestacodigo != null) {
            stmt.bindLong(4, respuestacodigo);
        }
 
        String respuestatexto = entity.getRespuestatexto();
        if (respuestatexto != null) {
            stmt.bindString(5, respuestatexto);
        }
 
        Long id_parent = entity.getId_parent();
        if (id_parent != null) {
            stmt.bindLong(6, id_parent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RespuestaDetalle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long pregunta_id = entity.getPregunta_id();
        if (pregunta_id != null) {
            stmt.bindLong(2, pregunta_id);
        }
 
        Integer tipo_id = entity.getTipo_id();
        if (tipo_id != null) {
            stmt.bindLong(3, tipo_id);
        }
 
        Integer respuestacodigo = entity.getRespuestacodigo();
        if (respuestacodigo != null) {
            stmt.bindLong(4, respuestacodigo);
        }
 
        String respuestatexto = entity.getRespuestatexto();
        if (respuestatexto != null) {
            stmt.bindString(5, respuestatexto);
        }
 
        Long id_parent = entity.getId_parent();
        if (id_parent != null) {
            stmt.bindLong(6, id_parent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RespuestaDetalle readEntity(Cursor cursor, int offset) {
        RespuestaDetalle entity = new RespuestaDetalle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // pregunta_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // tipo_id
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // respuestacodigo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // respuestatexto
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // id_parent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RespuestaDetalle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPregunta_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTipo_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRespuestacodigo(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRespuestatexto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId_parent(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RespuestaDetalle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RespuestaDetalle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RespuestaDetalle entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
